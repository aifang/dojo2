/* jshint node:true */

var path = require('path');

module.exports = function (grunt) {
	grunt.loadNpmTasks('grunt-ts');
	grunt.loadNpmTasks('grunt-contrib-watch');
	grunt.loadNpmTasks('grunt-contrib-clean');
	grunt.loadNpmTasks('intern');

	grunt.initConfig({
		all: [ '**/*.ts', '!node_modules/**/*.ts' ],
		ignoreDefinitions: [ '<%= all %>', '!**/*.d.ts' ],

		clean: {
			dojo: {
				src: [
					'**/{*.js,*.js.map}', 'sauce_connect.log', 'tscommand.tmp.txt', '!node_modules/**/*'
				],
				filter: function (filepath) {
					var jsName = filepath.match(/(.*\.js)(?:\.map)?$/)[1];

					// Only clean .js and .js.map files if BOTH the JavaScript and the map file exist.
					// Since the only thing generating map files is grunt-ts, this targets only the
					// JavaScript files generated by that process (including JavaScript files
					// generated for TypeScript files that have been moved or deleted).
					return grunt.file.exists(jsName) && grunt.file.exists(jsName + '.map');
				}
			}
		},

		ts: {
			options: {
				target: 'es5',
				module: 'amd',
				sourceMap: true,
				noImplicitAny: true,
				fast: 'never'
			},
			dojo: {
				src: [ '<%= ignoreDefinitions %>' ]
			}
		},

		watch: {
			dojo: {
				files: [ '<%= all %>' ],
				tasks: [ 'ts:dojo' ],
				options: {
					interrupt: true
				}
			}
		},

		intern: {
			/*local: {
				options: {
					runType: 'runner',
					config: 'tests/intern.local',
					reporters: ['runner']
				}
			},*/
			remote: {
				options: {
					runType: 'runner',
					config: 'tests/config',
					reporters: ['runner', 'pretty']
				}
			},
			proxy: {
				options: {
					runType: 'runner',
					proxyOnly: true,
					config: 'tests/config.proxy',
					reporters: ['runner', 'pretty']
				}
			},
			node: {
				options: {
					runType: 'client',
					config: 'tests/config',
					reporters: ['console', 'pretty']
				}
			}
		}
	});

	grunt.registerTask('test', function (target) {
		if (!target || target === 'coverage' || target === 'compile') {
			target = 'remote';
		}

		function addReporter(reporter) {
			var property = 'intern.' + target + '.options.reporters',
				value = grunt.config.get(property);

			if (value.indexOf(reporter) !== -1) {
				return;
			}

			value.push(reporter);
			grunt.config.set(property, value);
		}
		if (this.flags.coverage) {
			addReporter('lcovhtml');
		}
		if (this.flags.console) {
			addReporter('console');
		}

		if (this.flags.compile) {
			grunt.task.run('ts');
		}
		grunt.task.run('intern:' + target);
	});
	grunt.registerTask('build', function (moduleType) {
		if (moduleType !== 'commonjs') {
			moduleType = 'amd';
		}
		grunt.config.set('ts.options.module', moduleType);
		grunt.task.run('ts:dojo');
	});
	grunt.registerTask('default', [ 'ts:dojo', 'watch' ]);
};
